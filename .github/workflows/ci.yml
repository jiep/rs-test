name: CI

on: 
  push:
  pull_request:

jobs:
  lint-workflows:
    name: Lint GitHub Actions workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        
      - name: Lint workflow files
        uses: raven-actions/actionlint@3a24062651993d40fed1019b58ac6fbdfbf276cc # v2.0.1
  
  build-and-test:
    name: Build, test, and lint code
    runs-on: ubuntu-latest
    needs: lint-workflows
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Check code compilation
        run: cargo check

      - name: Run tests
        run: cargo test
      
      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy lints
        run: cargo clippy -- -D warnings

  deploy:
    name: Create release binaries
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      id-token: write
      attestations: write
    strategy: 
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            can-strip: true
          
          # Windows targets  
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            can-strip: true
            
          # macOS targets (native compilation)
          - target: x86_64-apple-darwin
            os: macos-13  # Intel-based macOS
            can-strip: false
            
          - target: aarch64-apple-darwin
            os: macos-latest  # Apple Silicon macOS
            can-strip: false
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (Linux/Windows)
        if: matrix.os == 'ubuntu-latest' && contains(matrix.target, 'windows')
        run: sudo apt-get update && sudo apt-get install -y gcc-mingw-w64

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package release binary
        shell: bash
        run: |
          BIN_NAME="rs-test"
          TARGET="${{ matrix.target }}"
          VERSION="${{ github.ref_name }}"
          
          # Set binary name with extension for Windows
          if [[ ${TARGET} == *"windows"* ]]; then
            BIN_NAME="${BIN_NAME}.exe"
          fi
          
          # Strip binary if supported
          if [[ "${{ matrix.can-strip }}" == "true" ]]; then
            strip "target/${TARGET}/release/${BIN_NAME}"
          fi
          
          # Navigate to release directory
          cd "target/${TARGET}/release"
          
          # Create versioned binary name
          VERSIONED_BIN_NAME="rs-test-${VERSION}-${TARGET}"
          if [[ ${TARGET} == *"windows"* ]]; then
            VERSIONED_BIN_NAME="${VERSIONED_BIN_NAME}.exe"
          fi
          
          # Rename binary and create checksum
          mv "${BIN_NAME}" "${VERSIONED_BIN_NAME}"
          
          # Generate checksum (use appropriate command for OS)
          if [[ "${{ matrix.os }}" == "macos"* ]]; then
            shasum -a 256 "${VERSIONED_BIN_NAME}" | cut -f 1 -d " " > digest.sha256
          else
            sha256sum "${VERSIONED_BIN_NAME}" | cut -f 1 -d " " > digest.sha256
          fi
          
          # Create release archive
          zip "../../../rs-test-${VERSION}-${TARGET}.zip" "${VERSIONED_BIN_NAME}" digest.sha256

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-path: 'rs-test-${{ github.ref_name }}-${{ matrix.target }}.zip'

      - name: Upload release artifacts
        uses: ncipollo/release-action@bcfe5470707e8832e12347755757cec0eb3c22af # v1.18.0
        with:
          artifacts: "*.zip"
          generateReleaseNotes: true
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
